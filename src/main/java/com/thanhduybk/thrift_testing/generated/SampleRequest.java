/**
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.thanhduybk.thrift_testing.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class SampleRequest implements org.apache.thrift.TBase<SampleRequest, SampleRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SampleRequest> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SampleRequest");

    private static final org.apache.thrift.protocol.TField SAMPLE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("sampleField", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField PAUSE_TIME_IN_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("pauseTimeInMs", org.apache.thrift.protocol.TType.I64, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new SampleRequestStandardSchemeFactory());
        schemes.put(TupleScheme.class, new SampleRequestTupleSchemeFactory());
    }

    public SampleField sampleField; // required
    public long pauseTimeInMs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        SAMPLE_FIELD((short) 1, "sampleField"),
        PAUSE_TIME_IN_MS((short) 2, "pauseTimeInMs");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // SAMPLE_FIELD
                    return SAMPLE_FIELD;
                case 2: // PAUSE_TIME_IN_MS
                    return PAUSE_TIME_IN_MS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PAUSETIMEINMS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.SAMPLE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("sampleField", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SampleField.class)));
        tmpMap.put(_Fields.PAUSE_TIME_IN_MS, new org.apache.thrift.meta_data.FieldMetaData("pauseTimeInMs", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SampleRequest.class, metaDataMap);
    }

    public SampleRequest() {
    }

    public SampleRequest(
            SampleField sampleField,
            long pauseTimeInMs) {
        this();
        this.sampleField = sampleField;
        this.pauseTimeInMs = pauseTimeInMs;
        setPauseTimeInMsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SampleRequest(SampleRequest other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetSampleField()) {
            this.sampleField = new SampleField(other.sampleField);
        }
        this.pauseTimeInMs = other.pauseTimeInMs;
    }

    public SampleRequest deepCopy() {
        return new SampleRequest(this);
    }

    @Override
    public void clear() {
        this.sampleField = null;
        setPauseTimeInMsIsSet(false);
        this.pauseTimeInMs = 0;
    }

    public SampleField getSampleField() {
        return this.sampleField;
    }

    public SampleRequest setSampleField(SampleField sampleField) {
        this.sampleField = sampleField;
        return this;
    }

    public void unsetSampleField() {
        this.sampleField = null;
    }

    /** Returns true if field sampleField is set (has been assigned a value) and false otherwise */
    public boolean isSetSampleField() {
        return this.sampleField != null;
    }

    public void setSampleFieldIsSet(boolean value) {
        if (!value) {
            this.sampleField = null;
        }
    }

    public long getPauseTimeInMs() {
        return this.pauseTimeInMs;
    }

    public SampleRequest setPauseTimeInMs(long pauseTimeInMs) {
        this.pauseTimeInMs = pauseTimeInMs;
        setPauseTimeInMsIsSet(true);
        return this;
    }

    public void unsetPauseTimeInMs() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAUSETIMEINMS_ISSET_ID);
    }

    /** Returns true if field pauseTimeInMs is set (has been assigned a value) and false otherwise */
    public boolean isSetPauseTimeInMs() {
        return EncodingUtils.testBit(__isset_bitfield, __PAUSETIMEINMS_ISSET_ID);
    }

    public void setPauseTimeInMsIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAUSETIMEINMS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case SAMPLE_FIELD:
                if (value == null) {
                    unsetSampleField();
                } else {
                    setSampleField((SampleField) value);
                }
                break;

            case PAUSE_TIME_IN_MS:
                if (value == null) {
                    unsetPauseTimeInMs();
                } else {
                    setPauseTimeInMs((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case SAMPLE_FIELD:
                return getSampleField();

            case PAUSE_TIME_IN_MS:
                return Long.valueOf(getPauseTimeInMs());

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case SAMPLE_FIELD:
                return isSetSampleField();
            case PAUSE_TIME_IN_MS:
                return isSetPauseTimeInMs();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof SampleRequest)
            return this.equals((SampleRequest) that);
        return false;
    }

    public boolean equals(SampleRequest that) {
        if (that == null)
            return false;

        boolean this_present_sampleField = true && this.isSetSampleField();
        boolean that_present_sampleField = true && that.isSetSampleField();
        if (this_present_sampleField || that_present_sampleField) {
            if (!(this_present_sampleField && that_present_sampleField))
                return false;
            if (!this.sampleField.equals(that.sampleField))
                return false;
        }

        boolean this_present_pauseTimeInMs = true;
        boolean that_present_pauseTimeInMs = true;
        if (this_present_pauseTimeInMs || that_present_pauseTimeInMs) {
            if (!(this_present_pauseTimeInMs && that_present_pauseTimeInMs))
                return false;
            if (this.pauseTimeInMs != that.pauseTimeInMs)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(SampleRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetSampleField()).compareTo(other.isSetSampleField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSampleField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampleField, other.sampleField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPauseTimeInMs()).compareTo(other.isSetPauseTimeInMs());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPauseTimeInMs()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pauseTimeInMs, other.pauseTimeInMs);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SampleRequest(");
        boolean first = true;

        sb.append("sampleField:");
        if (this.sampleField == null) {
            sb.append("null");
        } else {
            sb.append(this.sampleField);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("pauseTimeInMs:");
        sb.append(this.pauseTimeInMs);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SampleRequestStandardSchemeFactory implements SchemeFactory {
        public SampleRequestStandardScheme getScheme() {
            return new SampleRequestStandardScheme();
        }
    }

    private static class SampleRequestStandardScheme extends StandardScheme<SampleRequest> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SampleRequest struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // SAMPLE_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.sampleField = new SampleField();
                            struct.sampleField.read(iprot);
                            struct.setSampleFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PAUSE_TIME_IN_MS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.pauseTimeInMs = iprot.readI64();
                            struct.setPauseTimeInMsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SampleRequest struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.sampleField != null) {
                oprot.writeFieldBegin(SAMPLE_FIELD_FIELD_DESC);
                struct.sampleField.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PAUSE_TIME_IN_MS_FIELD_DESC);
            oprot.writeI64(struct.pauseTimeInMs);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SampleRequestTupleSchemeFactory implements SchemeFactory {
        public SampleRequestTupleScheme getScheme() {
            return new SampleRequestTupleScheme();
        }
    }

    private static class SampleRequestTupleScheme extends TupleScheme<SampleRequest> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SampleRequest struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetSampleField()) {
                optionals.set(0);
            }
            if (struct.isSetPauseTimeInMs()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetSampleField()) {
                struct.sampleField.write(oprot);
            }
            if (struct.isSetPauseTimeInMs()) {
                oprot.writeI64(struct.pauseTimeInMs);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SampleRequest struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.sampleField = new SampleField();
                struct.sampleField.read(iprot);
                struct.setSampleFieldIsSet(true);
            }
            if (incoming.get(1)) {
                struct.pauseTimeInMs = iprot.readI64();
                struct.setPauseTimeInMsIsSet(true);
            }
        }
    }

}

