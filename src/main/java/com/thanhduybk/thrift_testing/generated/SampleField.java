/**
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.thanhduybk.thrift_testing.generated;

import org.apache.thrift.protocol.TProtocolException;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;

public class SampleField extends org.apache.thrift.TUnion<SampleField, SampleField._Fields> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SampleField");
    private static final org.apache.thrift.protocol.TField INT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("intField", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField STR_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("strField", org.apache.thrift.protocol.TType.STRING, (short) 2);

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        INT_FIELD((short) 1, "intField"),
        STR_FIELD((short) 2, "strField");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // INT_FIELD
                    return INT_FIELD;
                case 2: // STR_FIELD
                    return STR_FIELD;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.INT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("intField", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.STR_FIELD, new org.apache.thrift.meta_data.FieldMetaData("strField", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SampleField.class, metaDataMap);
    }

    public SampleField() {
        super();
    }

    public SampleField(_Fields setField, Object value) {
        super(setField, value);
    }

    public SampleField(SampleField other) {
        super(other);
    }

    public SampleField deepCopy() {
        return new SampleField(this);
    }

    public static SampleField intField(int value) {
        SampleField x = new SampleField();
        x.setIntField(value);
        return x;
    }

    public static SampleField strField(String value) {
        SampleField x = new SampleField();
        x.setStrField(value);
        return x;
    }


    @Override
    protected void checkType(_Fields setField, Object value) throws ClassCastException {
        switch (setField) {
            case INT_FIELD:
                if (value instanceof Integer) {
                    break;
                }
                throw new ClassCastException("Was expecting value of type Integer for field 'intField', but got " + value.getClass().getSimpleName());
            case STR_FIELD:
                if (value instanceof String) {
                    break;
                }
                throw new ClassCastException("Was expecting value of type String for field 'strField', but got " + value.getClass().getSimpleName());
            default:
                throw new IllegalArgumentException("Unknown field id " + setField);
        }
    }

    @Override
    protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
        _Fields setField = _Fields.findByThriftId(field.id);
        if (setField != null) {
            switch (setField) {
                case INT_FIELD:
                    if (field.type == INT_FIELD_FIELD_DESC.type) {
                        Integer intField;
                        intField = iprot.readI32();
                        return intField;
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                        return null;
                    }
                case STR_FIELD:
                    if (field.type == STR_FIELD_FIELD_DESC.type) {
                        String strField;
                        strField = iprot.readString();
                        return strField;
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                        return null;
                    }
                default:
                    throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
            }
        } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
        }
    }

    @Override
    protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        switch (setField_) {
            case INT_FIELD:
                Integer intField = (Integer) value_;
                oprot.writeI32(intField);
                return;
            case STR_FIELD:
                String strField = (String) value_;
                oprot.writeString(strField);
                return;
            default:
                throw new IllegalStateException("Cannot write union with unknown field " + setField_);
        }
    }

    @Override
    protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
        _Fields setField = _Fields.findByThriftId(fieldID);
        if (setField != null) {
            switch (setField) {
                case INT_FIELD:
                    Integer intField;
                    intField = iprot.readI32();
                    return intField;
                case STR_FIELD:
                    String strField;
                    strField = iprot.readString();
                    return strField;
                default:
                    throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
            }
        } else {
            throw new TProtocolException("Couldn't find a field with field id " + fieldID);
        }
    }

    @Override
    protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        switch (setField_) {
            case INT_FIELD:
                Integer intField = (Integer) value_;
                oprot.writeI32(intField);
                return;
            case STR_FIELD:
                String strField = (String) value_;
                oprot.writeString(strField);
                return;
            default:
                throw new IllegalStateException("Cannot write union with unknown field " + setField_);
        }
    }

    @Override
    protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
        switch (setField) {
            case INT_FIELD:
                return INT_FIELD_FIELD_DESC;
            case STR_FIELD:
                return STR_FIELD_FIELD_DESC;
            default:
                throw new IllegalArgumentException("Unknown field id " + setField);
        }
    }

    @Override
    protected org.apache.thrift.protocol.TStruct getStructDesc() {
        return STRUCT_DESC;
    }

    @Override
    protected _Fields enumForId(short id) {
        return _Fields.findByThriftIdOrThrow(id);
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }


    public int getIntField() {
        if (getSetField() == _Fields.INT_FIELD) {
            return (Integer) getFieldValue();
        } else {
            throw new RuntimeException("Cannot get field 'intField' because union is currently set to " + getFieldDesc(getSetField()).name);
        }
    }

    public void setIntField(int value) {
        setField_ = _Fields.INT_FIELD;
        value_ = value;
    }

    public String getStrField() {
        if (getSetField() == _Fields.STR_FIELD) {
            return (String) getFieldValue();
        } else {
            throw new RuntimeException("Cannot get field 'strField' because union is currently set to " + getFieldDesc(getSetField()).name);
        }
    }

    public void setStrField(String value) {
        if (value == null) throw new NullPointerException();
        setField_ = _Fields.STR_FIELD;
        value_ = value;
    }

    public boolean isSetIntField() {
        return setField_ == _Fields.INT_FIELD;
    }


    public boolean isSetStrField() {
        return setField_ == _Fields.STR_FIELD;
    }


    public boolean equals(Object other) {
        if (other instanceof SampleField) {
            return equals((SampleField) other);
        } else {
            return false;
        }
    }

    public boolean equals(SampleField other) {
        return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
    }

    @Override
    public int compareTo(SampleField other) {
        int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
        if (lastComparison == 0) {
            return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
        }
        return lastComparison;
    }


    /**
     * If you'd like this to perform more respectably, use the hashcode generator option.
     */
    @Override
    public int hashCode() {
        return 0;
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }


    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }


}
